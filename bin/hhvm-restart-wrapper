#!/usr/bin/env php
<?php

// --
// This script cannot be hacklang due to you might be wanting to restart hhvm
// because of hack related strict failures, etc.
// --

abstract class Zynga_Base {

  public function message($prompt) {
    echo date('r') . ' - ' . $prompt . "\n";
    return true;
  }

  public function debug($message) {
    // $this->message($message);
    return true;
  }

}

class Zynga_External_Command extends Zynga_Base {
  private $_wasFound;
  private $_commandPath;

  /**
   * __construct
   *
   * @param string $command_name
   * @param bool $is_required
   * @access protected
   * @return void
   */
  function __construct($command_name, $is_required) {

    $this->_wasFound = false;
    $this->_commandPath = null;

    $this->find($command_name);

    if ( $is_required === true && $this->_wasFound === false ) {
      $this->message('command=' . $command_name . ' is required');
      exit(255);
    }

  }

  /**
   * find
   *
   * @access public
   * @param string $command_name
   * @return bool
   */
  public function find($command_name) {
    $envPath = getenv('PATH');
    $paths = explode(PATH_SEPARATOR, $envPath);
    foreach ( $paths as $path ) {
      $candidate = $path . DIRECTORY_SEPARATOR . $command_name;
      if ( is_executable($candidate) ) {
        $this->_commandPath = $candidate;
        $this->_wasFound = true;
        return true;
      }
    }
    return false;
  }

  /**
   * wasFound
   *
   * @access public
   * @return void
   */
  public function wasFound() {
    return $this->_wasFound;
  }

  /**
   * run
   *
   * @access public
   * @return int
   */
  public function run($params) {
    $return_value = null;

    $command = $this->_commandPath . ' ' . $params;

    $this->debug("  command=$command");
    system($command, $return_value);
    $this->debug("  command=$command return_value=$return_value");

    return $return_value;

  }

  /**
   * runAndCaptureOutput - run the command capturing both the output and return value
   *
   * @param string $params
   * @access public
   * @return array(return_value, output_as_array)
   */
  public function runAndCaptureOutput($params) {
    $return_value = null;
    $output = array();
    $command = $this->_commandPath . ' ' . $params;
    $this->debug("  command=$command");
    exec($command, $output, $return_value);
    $this->debug("  command=$command return_value=$return_value output=" . json_encode($output));
    return array($return_value, $output);
  }

}

class Zynga_HHVM_Service extends Zynga_Base {
  private $_hhClientCommand;
  private $_pgrepCommand;
  private $_pkillCommand;
  private $_findCommand;
  private $_executingUser;
  private $_executingUserHomeDirectory;

  public function __construct($hhClientCommand, $pgrepCommand, $pkillCommand, $findCommand) {
    $this->_hhClientCommand = $hhClientCommand;
    $this->_pgrepCommand =  $pgrepCommand;
    $this->_pkillCommand = $pkillCommand;
    $this->_findCommand = $findCommand;
    $this->_executingUser = '';
    $this->_executingUserHomeDirectory = '';
  }

  /**
   * message - overloaded to add a prefix of "HHVM - "
   *
   * @param string $message
   * @access public
   * @return bool
   */
  public function message($message) {
    return parent::message('HHVM - ' . $message);
  }

  /**
   * start - starts hhvm on the host, and verifies that it is running
   *
   * @access public
   * @return bool
   */
  public function start() {

    $this->message('start');

    if ( $this->checkIfRunning() === true ) {
      $this->message('start, already running');
      return true;
    }

    $result = $this->_hhClientCommand->run('start 2>/dev/null');

    if ( $result === 0 && $this->checkIfRunning() === true ) {
      $this->message('start, isRunning');
      return true;
    }

    return false;

  }

  /**
   * stop - stops hhvm on the box
   *
   * @access public
   * @return bool
   */
  public function stop() {

    $this->message('stop');

    if ( $this->checkIfRunning() === false ) {
      $this->message('stop, not-running');
      return true;
    }

    $result = $this->_hhClientCommand->run('stop 2>/dev/null');

    $this->message('result of previous command=' . json_encode($result));

    if ( $result === 0 ) {

      $this->message('stop command executed');

      // sweet the daemon shut off properly.
      if ( $this->checkIfRunning() === false ) {
        $this->message('stopped');
        return true;
      }
      // sometimes stop will keep a running daemon.
      if ( $this->forceStop() === true ) {
        $this->message('forceStop worked');
        return true;
      }
    }

    $this->message('stop failed');
    return false;

  }

  public function getExecutingUser() {

    if ( $this->_executingUser != '' ) {
      return $this->_executingUser;
    }

    // try to pull the user off the php environment
    $this->_executingUser = get_current_user();

    return $this->_executingUser;

  }

  public function getExecutingUserHomeDirectory() {

    if ( $this->_executingUserHomeDirectory != '' ) {
      return $this->_executingUserHomeDirectory;
    }

    if ( $this->_executingUser !== '' ) {
      $pw = posix_getpwnam($this->_executingUser);
      if ( isset($pw['dir']) ) {
        $this->_executingUserHomeDirectory = $pw['dir'];
      }
    }

    return $this->_executingUserHomeDirectory;

  }

  /**
   * forceStop - utilize pkill to kill off errant hhvm processes.
   *
   * @access public
   * @return bool
   */
  public function forceStop() {

    if ( $this->checkIfRunning() === false ) {
      return true;
    }

    $result = $this->_pkillCommand->run(
      '-u ' . $this->getExecutingUser() . ' hh_server'
    );

    if ( $result === 0 && $this->checkIfRunning() === false ) {
      return true;
    }

    return false;

  }

  /**
   * checkIfRunning - see if hhvm is up and running on the box.
   *
   * @access public
   * @return bool
   */
  public function checkIfRunning() {

    list($return_value, $output) = $this->_pgrepCommand->runAndCaptureOutput(
      '-u ' . $this->getExecutingUser() . ' hh_server'
    );

    if ( $return_value === 1 ) { //&& is_array($count) && count($output) === 0 ) {
      return false;
    }

    return true;

  }

  /**
   * doCleanup - cleans up the hhbc and all temporary files for hhvm.
   *
   * @access public
   * @return bool
   */
  public function doCleanup() {

    $USER = $this->getExecutingUser();
    $HOME = $this->getExecutingUserHomeDirectory();

    $hhbc_file = $HOME . '/.hhvm.hhbc';
    $tmp_hh_dir = '/tmp/hh_server';

    if ( is_file($hhbc_file) ) {
      unlink($hhbc_file);
    }

    if ( is_dir($tmp_hh_dir) ) {
      $this->_findCommand->run(
        $tmp_hh_dir . ' -user ' . $USER . ' -type f -exec rm {} \; 2> /dev/null '
      );
      $this->_findCommand->run(
        $tmp_hh_dir . ' -user ' . $USER . ' -type d -exec rmdir {} \; 2> /dev/null '
      );
      $this->_findCommand->run(
        $tmp_hh_dir . ' -user ' . $USER . ' -type l -exec unlink {} \; 2> /dev/null '
      );
    }

    return true;

  }

  private function attemptRestartFlow() {
    for ( $i = 0; $i < 5; $i++ ) {
      if ( $this->stop() !== true ) {
        sleep(1);
        continue;
      }

      if ( $this->doCleanup() !== true ) {
        sleep(1);
        continue;
      }

      if ( $this->start() === true ) {
        sleep(1);
        return true;
      }
    }

    return false;
  }

  public function standup() {

    $executingUser = $this->getExecutingUser();

    $this->message('executingUser=' . $executingUser);

    if ( $executingUser === '' ) {
      $this->message('FAILURE - Unable to determine executing user');
      exit(255);
    }

    $executingUserHomeDirectory = $this->getExecutingUserHomeDirectory();

    $this->message('executingUserHomeDirectory=' . $executingUserHomeDirectory);

    if ( $executingUserHomeDirectory === '' ) {
      $this->message('FAILURE - Unable to determine executing user home directory');
      exit(255);
    }

    $wasRestartFlowSuccessful = $this->attemptRestartFlow();
    if ($wasRestartFlowSuccessful === true) {
      exit(0);
    }
    $this->message('Unable to gracefully restart, killing hh_server and trying again');
    $this->forceStop();
    $wasRestartFlowSuccessful = $this->attemptRestartFlow();

    if ($wasRestartFlowSuccessful === true) {
      exit(0);
    }

    exit(255);
  }

}

// we always default to GMT
date_default_timezone_set('GMT');

// find the dependent commands
$pkillCommand       = new Zynga_External_Command('pkill', true);
$pgrepCommand       = new Zynga_External_Command('pgrep', true);
$hhClientCommand    = new Zynga_External_Command('hh_client', true);
$findCommand        = new Zynga_External_Command('find', true);

// create the service object
$hhvmService = new Zynga_HHVM_Service(
  $hhClientCommand,
  $pgrepCommand,
  $pkillCommand,
  $findCommand
);

// stand up the service
$hhvmService->standup();
